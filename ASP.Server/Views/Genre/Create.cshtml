@using ASP.Server.Controllers
@using ASP.Server.ViewModels
@model CreateGenreViewModel
@{
    ViewData["Title"] = "Add a genre";
}

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
        height: 100vh;
    }

    form {
        background-color: #fff;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        border-radius: 8px;
        width: 400px;
    }

    label {
        margin-bottom: 8px;
        font-weight: bold;
    }

    .container{
        display:flex;
        justify-content: center;
    }

    input, select {
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        width: 100%;
    }

    input[type="submit"] {
        background-color: #4caf50;
        color: #fff;
        border: none;
        padding: 10px;
        border-radius: 4px;
        cursor: pointer;
    }

    input[type="submit"]:hover {
        background-color: #45a049;
    }

</style>

<!-- Voici une facon de faire, mais ce n'est pas la seul, a vous de jouer ! -->
<form asp-controller="Genre" asp-action="Create">
    <div class="input-group">
        <label asp-for="Name">Genre Name</label>
        <input asp-for="Name" />
    </div>

    <div class="input-group">
        <label asp-for="Books">Select Books</label>
        <input type="text" id="bookFilter" placeholder="Type to filter books" />
        <!-- Display matching books in a dropdown -->
        <select asp-for="Books" id="matchingBooks" multiple style="display: none;">
            <!-- Options will be added dynamically with JavaScript -->
        </select>
    </div>

    <input type="submit" value="Add" />
</form>

<script>
    // Add JavaScript to handle book filtering
    document.getElementById("bookFilter").addEventListener("input", function () {
        // Get the input value
        var filterValue = this.value.toLowerCase();

        // Get the select element
        var matchingBooksSelect = document.getElementById("matchingBooks");

        // Check if filterValue is null or empty
        if (!filterValue) {
            // Hide the select element
            matchingBooksSelect.style.display = "none";
            return;
        } else {
            // Show the select element
            matchingBooksSelect.style.display = "block";
        }

        // Clear existing options
        matchingBooksSelect.innerHTML = "";

        // Add an empty default option
        var defaultOption = document.createElement("option");
        defaultOption.text = "Select Books";
        defaultOption.disabled = true;
        defaultOption.selected = true;
        matchingBooksSelect.appendChild(defaultOption);

        // Display matching books in the dropdown
        fetch(`/Genre/GetMatchingBooks?filterValue=${filterValue}`)
            .then(response => response.json())
            .then(data => {
                data.forEach(book => {
                    var option = document.createElement("option");
                    option.value = book.id; 
                    option.text = book.name;
                    matchingBooksSelect.appendChild(option);
                });
            });
    });
</script>
